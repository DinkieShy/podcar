// Generated by gencpp from file podcar/Joystick.msg
// DO NOT EDIT!


#ifndef PODCAR_MESSAGE_JOYSTICK_H
#define PODCAR_MESSAGE_JOYSTICK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace podcar
{
template <class ContainerAllocator>
struct Joystick_
{
  typedef Joystick_<ContainerAllocator> Type;

  Joystick_()
    : x(0.0)
    , y(0.0)
    , twist(0.0)
    , throttle(0.0)
    , button1(false)
    , button2(false)
    , button3(false)
    , button4(false)
    , button5(false)
    , button6(false)
    , button7(false)
    , button8(false)
    , button9(false)
    , button10(false)
    , button11(false)
    , button12(false)
    , button13(false)
    , button14(false)
    , button15(false)
    , button16(false)  {
    }
  Joystick_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , twist(0.0)
    , throttle(0.0)
    , button1(false)
    , button2(false)
    , button3(false)
    , button4(false)
    , button5(false)
    , button6(false)
    , button7(false)
    , button8(false)
    , button9(false)
    , button10(false)
    , button11(false)
    , button12(false)
    , button13(false)
    , button14(false)
    , button15(false)
    , button16(false)  {
  (void)_alloc;
    }



   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _twist_type;
  _twist_type twist;

   typedef double _throttle_type;
  _throttle_type throttle;

   typedef uint8_t _button1_type;
  _button1_type button1;

   typedef uint8_t _button2_type;
  _button2_type button2;

   typedef uint8_t _button3_type;
  _button3_type button3;

   typedef uint8_t _button4_type;
  _button4_type button4;

   typedef uint8_t _button5_type;
  _button5_type button5;

   typedef uint8_t _button6_type;
  _button6_type button6;

   typedef uint8_t _button7_type;
  _button7_type button7;

   typedef uint8_t _button8_type;
  _button8_type button8;

   typedef uint8_t _button9_type;
  _button9_type button9;

   typedef uint8_t _button10_type;
  _button10_type button10;

   typedef uint8_t _button11_type;
  _button11_type button11;

   typedef uint8_t _button12_type;
  _button12_type button12;

   typedef uint8_t _button13_type;
  _button13_type button13;

   typedef uint8_t _button14_type;
  _button14_type button14;

   typedef uint8_t _button15_type;
  _button15_type button15;

   typedef uint8_t _button16_type;
  _button16_type button16;





  typedef boost::shared_ptr< ::podcar::Joystick_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::podcar::Joystick_<ContainerAllocator> const> ConstPtr;

}; // struct Joystick_

typedef ::podcar::Joystick_<std::allocator<void> > Joystick;

typedef boost::shared_ptr< ::podcar::Joystick > JoystickPtr;
typedef boost::shared_ptr< ::podcar::Joystick const> JoystickConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::podcar::Joystick_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::podcar::Joystick_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace podcar

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'podcar': ['/home/podcar/catkin_ws/src/podcar/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::podcar::Joystick_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::podcar::Joystick_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::podcar::Joystick_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::podcar::Joystick_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::podcar::Joystick_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::podcar::Joystick_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::podcar::Joystick_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8ed7d955f44aee65ff70d63051fd8603";
  }

  static const char* value(const ::podcar::Joystick_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8ed7d955f44aee65ULL;
  static const uint64_t static_value2 = 0xff70d63051fd8603ULL;
};

template<class ContainerAllocator>
struct DataType< ::podcar::Joystick_<ContainerAllocator> >
{
  static const char* value()
  {
    return "podcar/Joystick";
  }

  static const char* value(const ::podcar::Joystick_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::podcar::Joystick_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x\n\
float64 y\n\
float64 twist\n\
float64 throttle\n\
bool button1\n\
bool button2\n\
bool button3\n\
bool button4\n\
bool button5\n\
bool button6\n\
bool button7\n\
bool button8\n\
bool button9\n\
bool button10\n\
bool button11\n\
bool button12\n\
bool button13\n\
bool button14\n\
bool button15\n\
bool button16\n\
";
  }

  static const char* value(const ::podcar::Joystick_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::podcar::Joystick_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.twist);
      stream.next(m.throttle);
      stream.next(m.button1);
      stream.next(m.button2);
      stream.next(m.button3);
      stream.next(m.button4);
      stream.next(m.button5);
      stream.next(m.button6);
      stream.next(m.button7);
      stream.next(m.button8);
      stream.next(m.button9);
      stream.next(m.button10);
      stream.next(m.button11);
      stream.next(m.button12);
      stream.next(m.button13);
      stream.next(m.button14);
      stream.next(m.button15);
      stream.next(m.button16);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Joystick_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::podcar::Joystick_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::podcar::Joystick_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "twist: ";
    Printer<double>::stream(s, indent + "  ", v.twist);
    s << indent << "throttle: ";
    Printer<double>::stream(s, indent + "  ", v.throttle);
    s << indent << "button1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button1);
    s << indent << "button2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button2);
    s << indent << "button3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button3);
    s << indent << "button4: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button4);
    s << indent << "button5: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button5);
    s << indent << "button6: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button6);
    s << indent << "button7: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button7);
    s << indent << "button8: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button8);
    s << indent << "button9: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button9);
    s << indent << "button10: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button10);
    s << indent << "button11: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button11);
    s << indent << "button12: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button12);
    s << indent << "button13: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button13);
    s << indent << "button14: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button14);
    s << indent << "button15: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button15);
    s << indent << "button16: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button16);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PODCAR_MESSAGE_JOYSTICK_H
