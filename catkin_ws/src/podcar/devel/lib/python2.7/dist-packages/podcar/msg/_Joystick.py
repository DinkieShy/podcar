# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from podcar/Joystick.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Joystick(genpy.Message):
  _md5sum = "8ed7d955f44aee65ff70d63051fd8603"
  _type = "podcar/Joystick"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 x
float64 y
float64 twist
float64 throttle
bool button1
bool button2
bool button3
bool button4
bool button5
bool button6
bool button7
bool button8
bool button9
bool button10
bool button11
bool button12
bool button13
bool button14
bool button15
bool button16
"""
  __slots__ = ['x','y','twist','throttle','button1','button2','button3','button4','button5','button6','button7','button8','button9','button10','button11','button12','button13','button14','button15','button16']
  _slot_types = ['float64','float64','float64','float64','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x,y,twist,throttle,button1,button2,button3,button4,button5,button6,button7,button8,button9,button10,button11,button12,button13,button14,button15,button16

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Joystick, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.x is None:
        self.x = 0.
      if self.y is None:
        self.y = 0.
      if self.twist is None:
        self.twist = 0.
      if self.throttle is None:
        self.throttle = 0.
      if self.button1 is None:
        self.button1 = False
      if self.button2 is None:
        self.button2 = False
      if self.button3 is None:
        self.button3 = False
      if self.button4 is None:
        self.button4 = False
      if self.button5 is None:
        self.button5 = False
      if self.button6 is None:
        self.button6 = False
      if self.button7 is None:
        self.button7 = False
      if self.button8 is None:
        self.button8 = False
      if self.button9 is None:
        self.button9 = False
      if self.button10 is None:
        self.button10 = False
      if self.button11 is None:
        self.button11 = False
      if self.button12 is None:
        self.button12 = False
      if self.button13 is None:
        self.button13 = False
      if self.button14 is None:
        self.button14 = False
      if self.button15 is None:
        self.button15 = False
      if self.button16 is None:
        self.button16 = False
    else:
      self.x = 0.
      self.y = 0.
      self.twist = 0.
      self.throttle = 0.
      self.button1 = False
      self.button2 = False
      self.button3 = False
      self.button4 = False
      self.button5 = False
      self.button6 = False
      self.button7 = False
      self.button8 = False
      self.button9 = False
      self.button10 = False
      self.button11 = False
      self.button12 = False
      self.button13 = False
      self.button14 = False
      self.button15 = False
      self.button16 = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4d16B().pack(_x.x, _x.y, _x.twist, _x.throttle, _x.button1, _x.button2, _x.button3, _x.button4, _x.button5, _x.button6, _x.button7, _x.button8, _x.button9, _x.button10, _x.button11, _x.button12, _x.button13, _x.button14, _x.button15, _x.button16))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.x, _x.y, _x.twist, _x.throttle, _x.button1, _x.button2, _x.button3, _x.button4, _x.button5, _x.button6, _x.button7, _x.button8, _x.button9, _x.button10, _x.button11, _x.button12, _x.button13, _x.button14, _x.button15, _x.button16,) = _get_struct_4d16B().unpack(str[start:end])
      self.button1 = bool(self.button1)
      self.button2 = bool(self.button2)
      self.button3 = bool(self.button3)
      self.button4 = bool(self.button4)
      self.button5 = bool(self.button5)
      self.button6 = bool(self.button6)
      self.button7 = bool(self.button7)
      self.button8 = bool(self.button8)
      self.button9 = bool(self.button9)
      self.button10 = bool(self.button10)
      self.button11 = bool(self.button11)
      self.button12 = bool(self.button12)
      self.button13 = bool(self.button13)
      self.button14 = bool(self.button14)
      self.button15 = bool(self.button15)
      self.button16 = bool(self.button16)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4d16B().pack(_x.x, _x.y, _x.twist, _x.throttle, _x.button1, _x.button2, _x.button3, _x.button4, _x.button5, _x.button6, _x.button7, _x.button8, _x.button9, _x.button10, _x.button11, _x.button12, _x.button13, _x.button14, _x.button15, _x.button16))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 48
      (_x.x, _x.y, _x.twist, _x.throttle, _x.button1, _x.button2, _x.button3, _x.button4, _x.button5, _x.button6, _x.button7, _x.button8, _x.button9, _x.button10, _x.button11, _x.button12, _x.button13, _x.button14, _x.button15, _x.button16,) = _get_struct_4d16B().unpack(str[start:end])
      self.button1 = bool(self.button1)
      self.button2 = bool(self.button2)
      self.button3 = bool(self.button3)
      self.button4 = bool(self.button4)
      self.button5 = bool(self.button5)
      self.button6 = bool(self.button6)
      self.button7 = bool(self.button7)
      self.button8 = bool(self.button8)
      self.button9 = bool(self.button9)
      self.button10 = bool(self.button10)
      self.button11 = bool(self.button11)
      self.button12 = bool(self.button12)
      self.button13 = bool(self.button13)
      self.button14 = bool(self.button14)
      self.button15 = bool(self.button15)
      self.button16 = bool(self.button16)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4d16B = None
def _get_struct_4d16B():
    global _struct_4d16B
    if _struct_4d16B is None:
        _struct_4d16B = struct.Struct("<4d16B")
    return _struct_4d16B
